system.time(ineff)
ineff <-  function(){
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
}
system.time(ineff)
system.time(ineff())
ineff <-  function(){
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
}
system.time(ineff())
system.time(ineff())$elapsed
system.time(ineff())
n <- 100000; z <- rnorm(n)
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
zneg
eff{
eff{
eff <- function{
eff <- function(){
n <- 100000; z <- rnorm(n)
zneg_opt <- z[z < 0]
}
system.time(eff())
ineff <-  function(){
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
}
system.time(ineff())
eff <- function(){
n <- 100000; z <- rnorm(n)
zneg_opt <- z[z < 0]
}
system.time(eff())
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
View(A)
?runif
x.true
y
A.dim
A.dim()
dim(A)
dim(A) , dim(x.True)
dim(x.True)
dim(x.true)
?solve
start <-  proc.time()
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
x1 <- solve(A) %*% y
end <- proc.time()
cat(end-start)
print(end-start)
?proc.time
start <- proc.time()
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
end <- proc.time()
print("Elapsed time for inefficient code" end-start)
start <- proc.time()
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
end <- proc.time()
print("Elapsed time for inefficient code" ,end-start)
n <- 100000; z <- rnorm(n)
zneg_opt <- z[z < 0]
system.time(eff())
start <- proc.time()
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
end <- proc.time()
print("Elapsed time for inefficient code" ,end-start)
start2 <- proc.time()
n <- 100000; z <- rnorm(n)
zneg_opt <- z[z < 0]
end2 <- proc.time()
print("Elapsed time for inefficient code" ,end2-start2)
start <- proc.time()
n <- 100000; z <- rnorm(n)
zneg <- 0;j <- 1
for (i in 1:n) {
if (z[i]<0) {
zneg[j] <- z[i]
j <- j + 1
}
}
end <- proc.time()
print(end-start)
start2 <- proc.time()
n <- 100000; z <- rnorm(n)
zneg_opt <- z[z < 0]
end2 <- proc.time()
print(end2-start2)
MeanAD(x1,x.true)
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x1 <- solve(A) %*% y
end <- proc.time()
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x1)
?solve
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x <- solve(A,y)
end <- proc.time()
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x)
mean(abs(x.true)- abs(x))
mean(abs(x.true-x))
mean(abs(x.true-x))
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x <- solve(A,y)
proc.time() - start
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x)
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x <- solve(A,y)
end <- proc.time()
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x)
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x1 <- solve(A) %*% y
end <- proc.time()
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x1)
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x1 <- solve(A) %*% y
end <- proc.time()
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x1)
set.seed(0); n <- 1000
A <- matrix(runif(n*n),n,n); x.true <- runif(n)
y <- A%*%x.true
start <-  proc.time()
x <- solve(A,y)
end <- proc.time()
print(end-start)
MAD <- function(x){
return(sum(abs(x-mean(x)))/length(x))
}
MAD(x.true)
MAD(x)
Markov <- function (N=100, initial.value=1, P)
{
X <- numeric(N)
X[1] <- initial.value + 1 # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])}
X - 1
}
P <- matrix(c(c(0.6,0.2,0.2),c(0.2,0.4,0.4),c(0.4,0.3,0.3)),byrow = TRUE, nrow = 3)
chain <- factor(Markov(1000, 0, P), labels = c("Sun", "Cloud", "Rain"))
table(chain)/length(chain)
Markov <- function (N=100, initial.value=1, P){
X <- numeric(N)
X[1] <- initial.value + 1  # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])
}
X-1
}
Pb <- matrix(nrow = 3, ncol = 3, byrow = TRUE, data = c(.6,.2,.2,.2,.4,.4,.4,.3,.3),
dimnames = list(c("Sun", "Cloud", "Rain"), c("Sun", "Cloud", "Rain")))
chain <- factor(Markov(1000, 0, Pb), labels = c("Sun", "Cloud", "Rain"))
table(chain)/length(chain)
Markov <- function (N=100, initial.value=1, P)
{
X <- numeric(N)
X[1] <- initial.value + 1 # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])}
X - 1
}
P <- matrix(c(c(0.6,0.2,0.2),c(0.2,0.4,0.4),c(0.4,0.3,0.3)),byrow = TRUE, nrow = 3)
chain <- factor(Markov(1000, 0, P), labels = c("Sun", "Cloud", "Rain"))
table(chain)/length(chain)
chain
Markov(1000,0,P)
table(chain)
length(chain)
Markov(100000,1,P)
table(Markov(100000,1,P))/length(Markov(100000,1,P))
table(Markov(100000,1,P))/length(Markov(100000,1,P))
result <- Markov(100000,1,P)
table(result)/length(result)
Markov <- function (N=100, initial.value=1, P)
{
X <- numeric(N)
X[1] <- initial.value + 1 # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])}
X - 1
}
P <- matrix(c(c(0.6,0.2,0.2),c(0.2,0.4,0.4),c(0.4,0.3,0.3)),byrow = TRUE, nrow = 3)
result <- Markov(100000,1,P)
table(result)/length(result)
Markov <- function (N=100, initial.value=1, P)
{
X <- numeric(N)
X[1] <- initial.value + 1 # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])}
X - 1
}
P <- matrix(c(c(0.6,0.2,0.2),c(0.2,0.4,0.4),c(0.4,0.3,0.3)),byrow = TRUE, nrow = 3)
result <- Markov(100000,1,P)
table(result)/length(result)
Markov <- function (N=100, initial.value=1, P){
X <- numeric(N)
X[1] <- initial.value + 1  # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])
}
X-1
}
Pb <- matrix(nrow = 3, ncol = 3, byrow = TRUE, data = c(.6,.2,.2,.2,.4,.4,.4,.3,.3),
dimnames = list(c("Sun", "Cloud", "Rain"), c("Sun", "Cloud", "Rain")))
chain <- factor(Markov(1000, 0, Pb), labels = c("Sun", "Cloud", "Rain"))
table(chain)/length(chain)
Markov <- function (N=100, initial.value=1, P){
X <- numeric(N)
X[1] <- initial.value + 1  # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])
}
X-1
}
Pb <- matrix(nrow = 3, ncol = 3, byrow = TRUE, data = c(.6,.2,.2,.2,.4,.4,.4,.3,.3),
dimnames = list(c("Sun", "Cloud", "Rain"), c("Sun", "Cloud", "Rain")))
chain <- factor(Markov(1000, 0, Pb), labels = c("Sun", "Cloud", "Rain"))
table(chain)/length(chain)
Markov <- function (N=100, initial.value=1, P){
X <- numeric(N)
X[1] <- initial.value + 1  # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])
}
X-1
}
Pb <- matrix(nrow = 3, ncol = 3, byrow = TRUE, data = c(.6,.2,.2,.2,.4,.4,.4,.3,.3),
dimnames = list(c("Sun", "Cloud", "Rain"), c("Sun", "Cloud", "Rain")))
chain <- factor(Markov(1000000, 0, Pb), labels = c("Sun", "Cloud", "Rain"))
table(chain)/length(chain)
table(chain)/length(chain)
table(chain)/length(chain)
table(chain)/length(chain)
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
plotmarkov(n=10000, start=0, window=100, transition=P, npanels=5)
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
plotmarkov(n=10000, start=0, window=100, transition=P, npanels=5)
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5, title){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0), gp=npanel)
print(xyplot(av0+av1 ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free")),main = title))
}
for(n in c(10000,25000,50000))
for(ww in c(100,1000,5000))
plotmarkov(n = n, window = ww, title = paste0(n," simulations with window width = ",ww))
x.Date <- as.Date(paste(2004, rep(1:4, 4:1), sample(1:28, 10), sep = "-"))
x <- zoo(rnorm(12), x.Date)
x <- rnorm(100)
rollmean(x, 3)
library(roll)
library('roll')
version
library(zoo)
library(zoo)
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
plotmarkov(n=10000, start=0, window=100, transition=P, npanels=5)
library("lattice")
library("zoo")
library("lattice")
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
plotmarkov(n=10000, start=0, window=100, transition=P, npanels=5)
library("zoo")
library("lattice")
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
for(sim in c(10000, 50000, 100000)){
for(win in c(100,500,1000)){
plotmarkov(n=sim, start=0, window=win, transition=P, npanels=5)
}
}
M <- 6 # number of friends
K <- 4 # zones
n <- 50 # number of shots
great_player <- sample( 1:K, n, replace=TRUE, prob =c( 2/16, 4/16, 5/16, 5/16))
observed <- table(great_player)
chisq.test( observed, p = c( 7/16, 5/16, 3/16, 1/16))
obs <- matrix(data = 0, nrow = M, ncol = K)
for(i in 1:M){
obs[i,] <- table(sample( 1:K, n, replace=TRUE, prob =c( 7/16, 5/16, 3/16, 1/16))) # almost same guys
}
Markov <- function (N=100, initial.value=1, P)
{
X <- numeric(N)
X[1] <- initial.value + 1 # States 0:5; subscripts 1:6
n <- nrow(P)
for (i in 2:N){
X[i] <- sample(1:n, size=1, prob=P[X[i-1], ])}
X - 1
}
P <- matrix(c(c(0.6,0.2,0.2),c(0.2,0.4,0.4),c(0.4,0.3,0.3)),byrow = TRUE, nrow = 3)
result <- Markov(100000,1,P)
table(result)/length(result)
library("zoo")
library("lattice")
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
# could not interpret this part, better code will be written
for(sim in c(50000, 100000)){
for(win in c(100,500,1000)){
plotmarkov(n=sim, start=0, window=win, transition=P, npanels=5)
}
}
library("zoo")
library("lattice")
plotmarkov <- function(n=10000, start=0, window=100, transition=Pb, npanels=5){
xc2 <- Markov(n, start, transition)
mav0 <- rollmean(as.integer(xc2==0), window)
mav1 <- rollmean(as.integer(xc2==0), window)
npanel <- cut(1:length(mav0), breaks=seq(from=1, to=length(mav0),
length=npanels+1), include.lowest=TRUE)
df <- data.frame(av0=mav0, av1=mav1, x=1:length(mav0),
gp=npanel)
print(xyplot(av0+av1  ~ x | gp, data=df, layout=c(1,npanels),
type="l", par.strip.text=list(cex=0.65),
scales=list(x=list(relation="free"))))
}
# could not interpret this part, better code will be written
for(sim in c(50000, 100000)){
for(win in c(100,1000)){
plotmarkov(n=sim, start=0, window=win, transition=P, npanels=5)
}
}
par (mfrow=c(1,2), oma=c(0,0,0,0))
y1 <- rnorm(51)
y1 # this is iid
y <- y1[-1] + y1[-51]
y # this is not iid
acf(y1) # acf is `autocorrelation function' (see Ch. 9)
acf(y)
